#!/usr/bin/env shell-helpers
p/help_main() {
  cat <<-EOF

secret - basic secret sharing built around gpg2 AES256

Usage:
  secret [options] <command> [--] <entities...>

Options:
  -p|--passphrase <passphrase>
    alternative passphrase to use when encrypting/decrypting. defaults to
   __crypto_default_passphrase or HOMEWORK_SECRET_PASSPHRASE if set.

Commands:
  decode [--] <entities...>
    decrypts entities and prints contents to stdout.
    an entity may be a filesystem path or URL. "-" denotes stdin

  encode [--] <entities...>
    encrypts entities and prints contents to stdout.
    an entity may be a filesystem path or URL. "-" denotes stdin

Examples:
  secret encode secret.txt > secret.txt.gpg
  secret decode secret.txt.gpg > secret.txt./
  echo "secret message" | secret encrypt > message.gpg
  curl https://secret.url/message.txt | secret decrypt > message.txt

EOF
}

main(){
  set -eo pipefail
  local path="${BASH_SOURCE[0]}"
  while [ -L "$path" ] ; do path="$(readlink "$path")" ; done
  readonly CWD="$( pwd -P )"
  readonly SCRIPT_CWD="$( cd $(dirname ${path}) ; pwd -P )"
  readonly SCRIPT_ENTRYPOINT="$0 $@"

  . "$SCRIPT_CWD/../lib/common.sh" || die "missing common library"
  . "$BOOTY_ROOT/lib/crypto.sh" || die "failed to load crypto helpers"

  # defaults
  local list=()
  local cmd=
  local entity=
  SECRET_PASSPHRASE="${SECRET_PASSPHRASE:-$__crypto_default_passphrase}"

  [ $# -gt 0 ] || die/help 1
  args/normalize "p" "$@"
  set -- "${__argv[@]}"
  while [ $# -ne 0 ]; do
    case "$1" in
      -h|--help)
        die/help ;;
      -p|--passphrase)
        SECRET_PASSPHRASE="$2" ; shift ;;
      --)
        shift ; list=( "$@" ) ; break ;;
      -*)
        args/unknown "$1" "flag" ;;
      decrypt)
        cmd="crypto/decode" ;;
      encrypt)
        cmd="crypto/encode" ;;
      decode|encode)
        cmd="crypto/$1" ;;
      *)
        list+=( "$1") ;;
    esac
    shift
  done

  # sanity
  is/fn "$cmd" || die/help 1 "unknown command ($cmd)"
  if [ ${#list[@]} -eq 0 ]; then
    if [ -t 0 ]; then
      die/help 1 "please provide stdin or entities..."
    else
      list=( "-" )
    fi
  fi

  # runtime
  for entity in "${list[@]}"; do
    cat/entity "$entity" | $cmd "$SECRET_PASSPHRASE"
  done
}

cat/entity(){
  local entity="$1"
  if is/url "$entity"; then
    network/print "$entity"
  else
    cat "$entity"
  fi
}

main "$@"
